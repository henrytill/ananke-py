"""The ArmoredFileStore class."""

from pathlib import Path

from ..data import KeyId, SecureEntry
from .store import Query, Reader, Writer


class ArmoredFileStore:
    """A store that uses ASCII-armored files generated by GPG to store entries."""

    path: Path
    writes: list[SecureEntry]

    def __init__(self, path: Path) -> None:
        self.path = path
        self.writes = []

    def init(self, reader: Reader) -> None:
        """Initializes the store.

        Args:
            reader: The reader to use to initialize the store.
        """
        raise NotImplementedError

    def put(self, entry: SecureEntry) -> None:
        """Puts an entry into the store.

        Args:
            entry: The entry to put into the store.
        """
        raise NotImplementedError

    def remove(self, entry: SecureEntry) -> None:
        """Removes an entry from the store.

        Args:
            entry: The entry to remove from the store.
        """
        raise NotImplementedError

    def query(self, query: Query) -> list[SecureEntry]:
        """Queries the store.

        Args:
            query: The query to run.

        Returns:
            A list of entries that match the query.
        """
        raise NotImplementedError

    def select_all(self) -> list[SecureEntry]:
        """Returns all entries from the store.

        Returns:
            A list of entries.
        """
        raise NotImplementedError

    def get_count(self) -> int:
        """Returns the count of all entries in the store.

        Returns:
            The count of all entries.
        """
        raise NotImplementedError

    def get_count_of_key_id(self, key_id: KeyId) -> int:
        """Returns the count of entries for a specific key id.

        Args:
            key_id: The key id to count entries for.
        """
        raise NotImplementedError

    def sync(self, writer: Writer) -> None:
        """Synchronizes the store with the file system."""
        raise NotImplementedError
